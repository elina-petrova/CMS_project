
#######################################################
PART 1
Display Date/Time for last successful login
#######################################################

1. In the database there is user_date column. This is where we will 
save the date of last successful login.

2. In login.php login function after username and passwordes has been
checkedand confirmed:
    2.1. get the last date from database
   
    $_SESSION['user_date'] = $found_user['user_date'];

    2.2. In index.php display the data

    <p>Last successful login: <?php echo $_SESSION['user_date'];?></p>


    2.3  Get the current date:

    date_default_timezone_set('America/Toronto');
    $date = date("Y-m-d H:i:s");

    2.4. Update database with new date

    $update_data_query = 'UPDATE tbl_user SET user_date= :user_date WHERE user_id=:user_id';
    $update_data_set = $pdo->prepare($update_data_query);
    $update_data_set->execute(
        array(
        ':user_date'=>$date,
        ':user_id'=>$found_user_id
        )
    );

##########################################################
PART 2
Account complete lockout after 3 failed login attempts
##########################################################

1. In login.php login function

    1.1. We changed the login function. If previously we searched for username and 
    password together, now we firstly looking for username and only then compare the
    input password and database password.

    1.2. In the database table we created new column - user_count that contains
    number of failed login attempts

    1.2. After username has been found, set the $_SESSION['user_count'] variable
    $_SESSION['user_count'] = $found_user['user_count'];
    
    1.3. If the password does not match:
        check if $_SESSION['user_count'] < 3
        and if true, increase $_SESSION['user_count'] += 1;
        and update table column with new $_SESSION['user_count']
        and return the message that shows that password is
        incorrect and how many attempts you have left
        
        1.3.1 Save the user_name value in input so that it is convinient for user to
        input only password
    1.4 If the passwird does match, add condition
    $_SESSION['user_count'] != 3 to prevent accessing dashboard is the password is correct

    1.5. If user after 1 on 2 attempts login succesfully, then make 
    $_SESSION['user_count'] = 0 and update the database
    

2. In admin_login.php 

    2.1. declare the variable
    $login_attempts = 0;

    2.2. update $login_attempts after you clicked on submit and run the login function
    $login_attempts = $_SESSION['user_count'];

    2.2. We added php if statement that will show login form only if
    $login_attempts < 3

    2.3. If $login_attempts > 3, return a string that tells thatuser is blocked



##########################################################
PART 3
Display total successfully login number of the account
##########################################################

1. In the database we added new column user_login_success that will hold
total successfully login number of the account

2. In login.php login function, if password has been matched, then take
the user_login_success from database, store it in session and increase for 1
$_SESSION['user_login_success'] = $found_user['user_login_success'] + 1;

3. Update user_login_success column in the database

##########################################################
PART 4
OPTIMIZATION
##########################################################

1. To many same-looking update quieries, so we created
update_table function in functions.php
